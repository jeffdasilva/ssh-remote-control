name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"
    
    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        uv sync --all-extras --dev
    
    - name: Run ruff format check
      run: |
        uv run ruff format --check .
    
    - name: Run ruff linting
      run: |
        uv run ruff check .
    
    - name: Run mypy type checking
      run: |
        uv run mypy src/ssh_remote_control tests/ --strict
    
    - name: Run pylint
      run: |
        uv run pylint src/ssh_remote_control
    
    - name: Run tests with pytest
      run: |
        uv run pytest tests/ -v --cov=src/ssh_remote_control --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
      continue-on-error: true

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"
    
    - name: Set up Python
      run: uv python install 3.12
    
    - name: Install dependencies
      run: |
        uv sync --all-extras --dev
    
    - name: Run bandit security linter
      run: |
        uv run bandit -r src/ssh_remote_control -f json -o bandit-report.json
    
    - name: Upload bandit report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json

  build:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"
    
    - name: Set up Python
      run: uv python install 3.12
    
    - name: Install dependencies
      run: |
        uv sync --all-extras --dev
    
    - name: Build package
      run: |
        uv build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  docker:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      if: secrets.DOCKER_USERNAME != ''
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      if: secrets.DOCKER_USERNAME != ''
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/ssh-remote-control:latest
          ${{ secrets.DOCKER_USERNAME }}/ssh-remote-control:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build Docker image (no push)
      uses: docker/build-push-action@v6
      if: secrets.DOCKER_USERNAME == ''
      with:
        context: .
        push: false
        tags: ssh-remote-control:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
