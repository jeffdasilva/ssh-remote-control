[project]
name = "ssh-remote-control"
version = "0.1.0"
description = "SSH Remote Control Dashboard - Monitor and control remote servers via SSH"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "asyncssh>=2.14.0",
    "typer>=0.9.0",
    "jinja2>=3.1.0",
    "python-multipart>=0.0.6",
    "websockets>=12.0",
    "rich>=13.0.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "pyyaml>=6.0.0",
]
authors = [
    {name = "Jeff DaSilva", email = "jeff.dasilva@gmail.com"},
]
license = {text = "MIT"}
homepage = "https://github.com/jeffdasilva/ssh-remote-control"
repository = "https://github.com/jeffdasilva/ssh-remote-control"
documentation = "https://github.com/jeffdasilva/ssh-remote-control/wiki"
issues = "https://github.com/jeffdasilva/ssh-remote-control/issues"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
]

[project.scripts]
ssh-remote-control = "ssh_remote_control.cli:main"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "mypy>=1.7.0",
    "ruff>=0.1.0",
    "pylint>=3.0.0",
    "pre-commit>=3.0.0",
    "types-requests>=2.31.0",
    "bandit>=1.7.0",
    "httpx>=0.24.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/ssh_remote_control"]

[tool.ruff]
target-version = "py310"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "ICN", # flake8-import-conventions
    "S", # flake8-bandit
]
ignore = [
    "S101", # Use of assert detected
    "S603", # subprocess call with untrusted input
    "S607", # Starting a process with a partial executable path
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S104", # Possible binding to all interfaces (OK in tests)
    "S108", # Probable insecure usage of temp file (OK in tests)
    "ARG001", # Unused function argument (common in test mocks)
    "ARG004", # Unused static method argument (common in test mocks)
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

# Include tests in type checking
files = ["src", "tests"]

# Special handling for test files
[[tool.mypy.overrides]]
module = "tests.*"
# Allow some relaxed rules for test files while still maintaining type safety
warn_unused_ignores = false

# Special handling for logging config due to strict typing issues with logging module
[[tool.mypy.overrides]]
module = "ssh_remote_control.logging_config"
warn_unused_ignores = false
disable_error_code = ["misc"]

# Special handling for web_server due to logging setup
[[tool.mypy.overrides]]
module = "ssh_remote_control.web_server"
warn_unused_ignores = false

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --cov=src/ssh_remote_control --cov-report=term-missing"
testpaths = ["tests"]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::RuntimeWarning",
    "ignore::pytest.PytestUnraisableExceptionWarning"
]

[tool.pylint.main]
py-version = "3.12"
jobs = 0
load-plugins = ["pylint.extensions.typing"]

[tool.pylint.messages_control]
disable = [
    "missing-module-docstring",
    "missing-class-docstring",
    "missing-function-docstring",
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-locals",
    "too-many-branches",
    "too-many-statements",
    "duplicate-code",
]

[tool.pylint.format]
max-line-length = 88

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[dependency-groups]
dev = [
    "types-pyyaml>=6.0.12.20250516",
    "types-setuptools>=80.9.0.20250529",
]
